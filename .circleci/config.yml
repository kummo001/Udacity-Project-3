version: 2.1
orbs:
  slack: circleci/slack@4.1
#GET_PASSES_THIS_REPO_UDACITY_PLEASE
commands:
  destroy-environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowId>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowId>>
            aws s3 rm s3://udapeople-<<parameters.workflowId>> --recursive
  revert-migrations:
    description: Revert the last migration
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Aufc8VBYi2Y1CSUoXsBGh5/migration_<<parameters.workflowId>>)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi          

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend 
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical fix --force   
      - slack/notify:
          event: fail
          template: basic_fail_1      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend 
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical fix --force
      - slack/notify:
          event: fail
          template: basic_fail_1   
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9b:ce:af:3f:4f:71:b9:d1:16:c8:8e:88:54:97:94:03"]
      - run:
          name: Install essential dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople   
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo -e "[web]\n" > ./.circleci/ansible/inventory
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> ./.circleci/ansible/inventory
            cat ./.circleci/ansible/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1    
  configure-infrastructure:
    docker:
      - image: python:3.9-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9b:ce:af:3f:4f:71:b9:d1:16:c8:8e:88:54:97:94:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk --no-cache add curl
      - run:
          name: Configure server 
          command: |
            cd .circleci/ansible
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      - slack/notify:
          event: fail
          template: basic_fail_1      
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"   
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["9b:ce:af:3f:4f:71:b9:d1:16:c8:8e:88:54:97:94:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/Aufc8VBYi2Y1CSUoXsBGh5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure         
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl jq software-properties-common
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "aws.zip"
            unzip aws.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"   

  deploy-backend:
    docker:
      - image: python:3.9-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9b:ce:af:3f:4f:71:b9:d1:16:c8:8e:88:54:97:94:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            apk --no-cache add curl jq
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            pwd
            ls
            cd .circleci/ansible
            echo "Contents  of the inventory file is -------"
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"  
  smoke-test:
    docker:
      - image: python:3.9-alpine3.16 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl jq tar gzip
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            API_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${API_URL}
            if curl -s $API_URL | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl --insecure -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi  
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      - image: python:3.9-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old workflow id: ${OLD_WORKFLOW_ID}"
            OLD_WORKFLOW_ID_ONLY = ${OLD_WORKFLOW_ID} | sed 's/.*-//'   
            echo "Old workflow id only: ${OLD_WORKFLOW_ID_ONLY}"
            curl --insecure https://kvdb.io/Aufc8VBYi2Y1CSUoXsBGh5/old_workflow_id -d "${OLD_WORKFLOW_ID_ONLY}"      
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # Here's where you will add some code to rollback on failure   
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"       
  cleanup:
    docker:
      - image: python:3.9-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Remove old stacks and files
          command: |
            OLD_WORKFLOW_ID=$(curl --insecure https://kvdb.io/Aufc8VBYi2Y1CSUoXsBGh5/old_workflow_id)
            echo "New: ${CIRCLE_WORKFLOW_ID:0:7} and Old: ${OLD_WORKFLOW_ID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OLD_WORKFLOW_ID}" ]]
            then
              echo "---------------------------Delete Confirmed----------------------------------"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}" 
            else
               echo "---------------------------Cannot Cleanup-----------------------------------"
            fi
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]    
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]