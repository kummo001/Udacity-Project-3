version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environments:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowId>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowId>>
            aws s3 rm s3://udapeople-<<parameters.workflowId>> --recursive

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend 
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical fix --force   
      - slack/notify:
          event: fail
          template: basic_fail_1      
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend 
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical fix --force
      - slack/notify:
          event: fail
          template: basic_fail_1   
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9b:ce:af:3f:4f:71:b9:d1:16:c8:8e:88:54:97:94:03"]
      - run:
          name: Install essential dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople   
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${IP} >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9b:ce:af:3f:4f:71:b9:d1:16:c8:8e:88:54:97:94:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk --no-cache add curl
      - run:
          name: Configure server a
          command: |
            cd .circleci/ansible
            echo $(pwd)
            echo $(cat inventory.txt)
            ansible-playbook -i inventory.txt configure-server.yml
      - slack/notify:
          event: fail
          template: basic_fail_1      
      - destroy-environments:
          workflowId: "${CIRCLE_WORKFLOW_ID:0:7}"                          
workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]    
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure
          # requires: [deploy-infrastructure]